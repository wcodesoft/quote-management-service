// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.2
// source: protos/quote.proto

package quote_management_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QuoteManagementClient is the client API for QuoteManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuoteManagementClient interface {
	// Create a new Quote entry on the service.
	CreateQuote(ctx context.Context, in *Quote, opts ...grpc.CallOption) (*Response, error)
	// Update Quote by the uuid if they exist in the system.
	UpdateQuote(ctx context.Context, in *Quote, opts ...grpc.CallOption) (*Response, error)
	// Try to delete Quote if it exists on the system.
	DeleteQuote(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*Response, error)
	// Get all Quotes from service.
	GetQuotes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetQuotesResponse, error)
	// Get Quote by uuid if they exist in the system.
	GetQuote(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*Quote, error)
}

type quoteManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewQuoteManagementClient(cc grpc.ClientConnInterface) QuoteManagementClient {
	return &quoteManagementClient{cc}
}

func (c *quoteManagementClient) CreateQuote(ctx context.Context, in *Quote, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/org.wcode.proto.quotemanagement.QuoteManagement/CreateQuote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quoteManagementClient) UpdateQuote(ctx context.Context, in *Quote, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/org.wcode.proto.quotemanagement.QuoteManagement/UpdateQuote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quoteManagementClient) DeleteQuote(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/org.wcode.proto.quotemanagement.QuoteManagement/DeleteQuote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quoteManagementClient) GetQuotes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetQuotesResponse, error) {
	out := new(GetQuotesResponse)
	err := c.cc.Invoke(ctx, "/org.wcode.proto.quotemanagement.QuoteManagement/GetQuotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quoteManagementClient) GetQuote(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*Quote, error) {
	out := new(Quote)
	err := c.cc.Invoke(ctx, "/org.wcode.proto.quotemanagement.QuoteManagement/GetQuote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuoteManagementServer is the server API for QuoteManagement service.
// All implementations must embed UnimplementedQuoteManagementServer
// for forward compatibility
type QuoteManagementServer interface {
	// Create a new Quote entry on the service.
	CreateQuote(context.Context, *Quote) (*Response, error)
	// Update Quote by the uuid if they exist in the system.
	UpdateQuote(context.Context, *Quote) (*Response, error)
	// Try to delete Quote if it exists on the system.
	DeleteQuote(context.Context, *RequestId) (*Response, error)
	// Get all Quotes from service.
	GetQuotes(context.Context, *emptypb.Empty) (*GetQuotesResponse, error)
	// Get Quote by uuid if they exist in the system.
	GetQuote(context.Context, *RequestId) (*Quote, error)
	mustEmbedUnimplementedQuoteManagementServer()
}

// UnimplementedQuoteManagementServer must be embedded to have forward compatible implementations.
type UnimplementedQuoteManagementServer struct {
}

func (UnimplementedQuoteManagementServer) CreateQuote(context.Context, *Quote) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQuote not implemented")
}
func (UnimplementedQuoteManagementServer) UpdateQuote(context.Context, *Quote) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQuote not implemented")
}
func (UnimplementedQuoteManagementServer) DeleteQuote(context.Context, *RequestId) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQuote not implemented")
}
func (UnimplementedQuoteManagementServer) GetQuotes(context.Context, *emptypb.Empty) (*GetQuotesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuotes not implemented")
}
func (UnimplementedQuoteManagementServer) GetQuote(context.Context, *RequestId) (*Quote, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuote not implemented")
}
func (UnimplementedQuoteManagementServer) mustEmbedUnimplementedQuoteManagementServer() {}

// UnsafeQuoteManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuoteManagementServer will
// result in compilation errors.
type UnsafeQuoteManagementServer interface {
	mustEmbedUnimplementedQuoteManagementServer()
}

func RegisterQuoteManagementServer(s grpc.ServiceRegistrar, srv QuoteManagementServer) {
	s.RegisterService(&QuoteManagement_ServiceDesc, srv)
}

func _QuoteManagement_CreateQuote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Quote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuoteManagementServer).CreateQuote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.wcode.proto.quotemanagement.QuoteManagement/CreateQuote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuoteManagementServer).CreateQuote(ctx, req.(*Quote))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuoteManagement_UpdateQuote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Quote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuoteManagementServer).UpdateQuote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.wcode.proto.quotemanagement.QuoteManagement/UpdateQuote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuoteManagementServer).UpdateQuote(ctx, req.(*Quote))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuoteManagement_DeleteQuote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuoteManagementServer).DeleteQuote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.wcode.proto.quotemanagement.QuoteManagement/DeleteQuote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuoteManagementServer).DeleteQuote(ctx, req.(*RequestId))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuoteManagement_GetQuotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuoteManagementServer).GetQuotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.wcode.proto.quotemanagement.QuoteManagement/GetQuotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuoteManagementServer).GetQuotes(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuoteManagement_GetQuote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuoteManagementServer).GetQuote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.wcode.proto.quotemanagement.QuoteManagement/GetQuote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuoteManagementServer).GetQuote(ctx, req.(*RequestId))
	}
	return interceptor(ctx, in, info, handler)
}

// QuoteManagement_ServiceDesc is the grpc.ServiceDesc for QuoteManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuoteManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "org.wcode.proto.quotemanagement.QuoteManagement",
	HandlerType: (*QuoteManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateQuote",
			Handler:    _QuoteManagement_CreateQuote_Handler,
		},
		{
			MethodName: "UpdateQuote",
			Handler:    _QuoteManagement_UpdateQuote_Handler,
		},
		{
			MethodName: "DeleteQuote",
			Handler:    _QuoteManagement_DeleteQuote_Handler,
		},
		{
			MethodName: "GetQuotes",
			Handler:    _QuoteManagement_GetQuotes_Handler,
		},
		{
			MethodName: "GetQuote",
			Handler:    _QuoteManagement_GetQuote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/quote.proto",
}
